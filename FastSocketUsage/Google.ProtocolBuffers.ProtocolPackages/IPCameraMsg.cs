// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class IPCameraMsg {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_protocol_IPCameraStatReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::protocol.IPCameraStatReq, global::protocol.IPCameraStatReq.Builder> internal__static_protocol_IPCameraStatReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_protocol_IPCameraStatRsp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::protocol.IPCameraStatRsp, global::protocol.IPCameraStatRsp.Builder> internal__static_protocol_IPCameraStatRsp__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static IPCameraMsg() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFJUENhbWVyYU1zZy5wcm90bxIIcHJvdG9jb2waEVByb3RvRGVmaW5lLnBy", 
            "b3RvIlMKD0lQQ2FtZXJhU3RhdFJlcRILCgNNYWMYASACKAkSDwoHQ2hhbm5l", 
            "bBgCIAMoDRIiCgRTdGF0GAMgAygOMhQucHJvdG9jb2wuRGV2aWNlU3RhdCIf", 
          "Cg9JUENhbWVyYVN0YXRSc3ASDAoEQ29kZRgBIAIoDQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_protocol_IPCameraStatReq__Descriptor = Descriptor.MessageTypes[0];
        internal__static_protocol_IPCameraStatReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::protocol.IPCameraStatReq, global::protocol.IPCameraStatReq.Builder>(internal__static_protocol_IPCameraStatReq__Descriptor,
                new string[] { "Mac", "Channel", "Stat", });
        internal__static_protocol_IPCameraStatRsp__Descriptor = Descriptor.MessageTypes[1];
        internal__static_protocol_IPCameraStatRsp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::protocol.IPCameraStatRsp, global::protocol.IPCameraStatRsp.Builder>(internal__static_protocol_IPCameraStatRsp__Descriptor,
                new string[] { "Code", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::protocol.ProtoDefine.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IPCameraStatReq : pb::GeneratedMessage<IPCameraStatReq, IPCameraStatReq.Builder> {
    private IPCameraStatReq() { }
    private static readonly IPCameraStatReq defaultInstance = new IPCameraStatReq().MakeReadOnly();
    private static readonly string[] _iPCameraStatReqFieldNames = new string[] { "Channel", "Mac", "Stat" };
    private static readonly uint[] _iPCameraStatReqFieldTags = new uint[] { 16, 10, 24 };
    public static IPCameraStatReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IPCameraStatReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IPCameraStatReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protocol.IPCameraMsg.internal__static_protocol_IPCameraStatReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IPCameraStatReq, IPCameraStatReq.Builder> InternalFieldAccessors {
      get { return global::protocol.IPCameraMsg.internal__static_protocol_IPCameraStatReq__FieldAccessorTable; }
    }
    
    public const int MacFieldNumber = 1;
    private bool hasMac;
    private string mac_ = "";
    public bool HasMac {
      get { return hasMac; }
    }
    public string Mac {
      get { return mac_; }
    }
    
    public const int ChannelFieldNumber = 2;
    private pbc::PopsicleList<uint> channel_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> ChannelList {
      get { return pbc::Lists.AsReadOnly(channel_); }
    }
    public int ChannelCount {
      get { return channel_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetChannel(int index) {
      return channel_[index];
    }
    
    public const int StatFieldNumber = 3;
    private pbc::PopsicleList<global::protocol.DeviceStat> stat_ = new pbc::PopsicleList<global::protocol.DeviceStat>();
    public scg::IList<global::protocol.DeviceStat> StatList {
      get { return pbc::Lists.AsReadOnly(stat_); }
    }
    public int StatCount {
      get { return stat_.Count; }
    }
    public global::protocol.DeviceStat GetStat(int index) {
      return stat_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMac) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _iPCameraStatReqFieldNames;
      if (hasMac) {
        output.WriteString(1, field_names[1], Mac);
      }
      if (channel_.Count > 0) {
        output.WriteUInt32Array(2, field_names[0], channel_);
      }
      if (stat_.Count > 0) {
        output.WriteEnumArray(3, field_names[2], stat_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMac) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Mac);
      }
      {
        int dataSize = 0;
        foreach (uint element in ChannelList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * channel_.Count;
      }
      {
        int dataSize = 0;
        if (stat_.Count > 0) {
          foreach (global::protocol.DeviceStat element in stat_) {
            dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
          }
          size += dataSize;
          size += 1 * stat_.Count;
        }
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IPCameraStatReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPCameraStatReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPCameraStatReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPCameraStatReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPCameraStatReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPCameraStatReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IPCameraStatReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IPCameraStatReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IPCameraStatReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPCameraStatReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IPCameraStatReq MakeReadOnly() {
      channel_.MakeReadOnly();
      stat_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IPCameraStatReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IPCameraStatReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IPCameraStatReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IPCameraStatReq result;
      
      private IPCameraStatReq PrepareBuilder() {
        if (resultIsReadOnly) {
          IPCameraStatReq original = result;
          result = new IPCameraStatReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IPCameraStatReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protocol.IPCameraStatReq.Descriptor; }
      }
      
      public override IPCameraStatReq DefaultInstanceForType {
        get { return global::protocol.IPCameraStatReq.DefaultInstance; }
      }
      
      public override IPCameraStatReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IPCameraStatReq) {
          return MergeFrom((IPCameraStatReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IPCameraStatReq other) {
        if (other == global::protocol.IPCameraStatReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMac) {
          Mac = other.Mac;
        }
        if (other.channel_.Count != 0) {
          result.channel_.Add(other.channel_);
        }
        if (other.stat_.Count != 0) {
          result.stat_.Add(other.stat_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_iPCameraStatReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _iPCameraStatReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMac = input.ReadString(ref result.mac_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.channel_);
              break;
            }
            case 26:
            case 24: {
              scg::ICollection<object> unknownItems;
              input.ReadEnumArray<global::protocol.DeviceStat>(tag, field_name, result.stat_, out unknownItems);
              if (unknownItems != null) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                foreach (object rawValue in unknownItems)
                  if (rawValue is int)
                    unknownFields.MergeVarintField(3, (ulong)(int)rawValue);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMac {
        get { return result.hasMac; }
      }
      public string Mac {
        get { return result.Mac; }
        set { SetMac(value); }
      }
      public Builder SetMac(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMac = true;
        result.mac_ = value;
        return this;
      }
      public Builder ClearMac() {
        PrepareBuilder();
        result.hasMac = false;
        result.mac_ = "";
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> ChannelList {
        get { return PrepareBuilder().channel_; }
      }
      public int ChannelCount {
        get { return result.ChannelCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetChannel(int index) {
        return result.GetChannel(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannel(int index, uint value) {
        PrepareBuilder();
        result.channel_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddChannel(uint value) {
        PrepareBuilder();
        result.channel_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeChannel(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.channel_.Add(values);
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.channel_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::protocol.DeviceStat> StatList {
        get { return PrepareBuilder().stat_; }
      }
      public int StatCount {
        get { return result.StatCount; }
      }
      public global::protocol.DeviceStat GetStat(int index) {
        return result.GetStat(index);
      }
      public Builder SetStat(int index, global::protocol.DeviceStat value) {
        PrepareBuilder();
        result.stat_[index] = value;
        return this;
      }
      public Builder AddStat(global::protocol.DeviceStat value) {
        PrepareBuilder();
        result.stat_.Add(value);
        return this;
      }
      public Builder AddRangeStat(scg::IEnumerable<global::protocol.DeviceStat> values) {
        PrepareBuilder();
        result.stat_.Add(values);
        return this;
      }
      public Builder ClearStat() {
        PrepareBuilder();
        result.stat_.Clear();
        return this;
      }
    }
    static IPCameraStatReq() {
      object.ReferenceEquals(global::protocol.IPCameraMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IPCameraStatRsp : pb::GeneratedMessage<IPCameraStatRsp, IPCameraStatRsp.Builder> {
    private IPCameraStatRsp() { }
    private static readonly IPCameraStatRsp defaultInstance = new IPCameraStatRsp().MakeReadOnly();
    private static readonly string[] _iPCameraStatRspFieldNames = new string[] { "Code" };
    private static readonly uint[] _iPCameraStatRspFieldTags = new uint[] { 8 };
    public static IPCameraStatRsp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IPCameraStatRsp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IPCameraStatRsp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protocol.IPCameraMsg.internal__static_protocol_IPCameraStatRsp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IPCameraStatRsp, IPCameraStatRsp.Builder> InternalFieldAccessors {
      get { return global::protocol.IPCameraMsg.internal__static_protocol_IPCameraStatRsp__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private uint code_;
    public bool HasCode {
      get { return hasCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint Code {
      get { return code_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _iPCameraStatRspFieldNames;
      if (hasCode) {
        output.WriteUInt32(1, field_names[0], Code);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Code);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IPCameraStatRsp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPCameraStatRsp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPCameraStatRsp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPCameraStatRsp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPCameraStatRsp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPCameraStatRsp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IPCameraStatRsp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IPCameraStatRsp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IPCameraStatRsp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPCameraStatRsp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IPCameraStatRsp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IPCameraStatRsp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IPCameraStatRsp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IPCameraStatRsp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IPCameraStatRsp result;
      
      private IPCameraStatRsp PrepareBuilder() {
        if (resultIsReadOnly) {
          IPCameraStatRsp original = result;
          result = new IPCameraStatRsp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IPCameraStatRsp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protocol.IPCameraStatRsp.Descriptor; }
      }
      
      public override IPCameraStatRsp DefaultInstanceForType {
        get { return global::protocol.IPCameraStatRsp.DefaultInstance; }
      }
      
      public override IPCameraStatRsp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IPCameraStatRsp) {
          return MergeFrom((IPCameraStatRsp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IPCameraStatRsp other) {
        if (other == global::protocol.IPCameraStatRsp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_iPCameraStatRspFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _iPCameraStatRspFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCode = input.ReadUInt32(ref result.code_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCode(uint value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
    }
    static IPCameraStatRsp() {
      object.ReferenceEquals(global::protocol.IPCameraMsg.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
