// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class RealPlayMsg {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_protocol_RealPlayReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::protocol.RealPlayReq, global::protocol.RealPlayReq.Builder> internal__static_protocol_RealPlayReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_protocol_RealPlayRsp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::protocol.RealPlayRsp, global::protocol.RealPlayRsp.Builder> internal__static_protocol_RealPlayRsp__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static RealPlayMsg() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFSZWFsUGxheU1zZy5wcm90bxIIcHJvdG9jb2waEUlkZW50aXR5TXNnLnBy", 
            "b3RvGhFQcm90b0RlZmluZS5wcm90byJ2CgtSZWFsUGxheVJlcRIqCgRJZGVu", 
            "GAEgAigLMhwucHJvdG9jb2wuSWRlbnRpdHlJbmZvQ2xpTXNnEhIKB0NoYW5u", 
            "ZWwYAiABKA06ATASJwoDQ21kGAMgASgOMhQucHJvdG9jb2wuQWN0aW9uVHlw", 
            "ZToEU1RPUCJyCgtSZWFsUGxheVJzcBIqCgRJZGVuGAEgAigLMhwucHJvdG9j", 
            "b2wuSWRlbnRpdHlJbmZvQ2xpTXNnEgwKBENvZGUYAiACKA0SEwoIRGF0YVNp", 
          "emUYAyABKA06ATASFAoKU3RyZWFtSW5mbxgEIAEoCToA"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_protocol_RealPlayReq__Descriptor = Descriptor.MessageTypes[0];
        internal__static_protocol_RealPlayReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::protocol.RealPlayReq, global::protocol.RealPlayReq.Builder>(internal__static_protocol_RealPlayReq__Descriptor,
                new string[] { "Iden", "Channel", "Cmd", });
        internal__static_protocol_RealPlayRsp__Descriptor = Descriptor.MessageTypes[1];
        internal__static_protocol_RealPlayRsp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::protocol.RealPlayRsp, global::protocol.RealPlayRsp.Builder>(internal__static_protocol_RealPlayRsp__Descriptor,
                new string[] { "Iden", "Code", "DataSize", "StreamInfo", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::protocol.IdentityMsg.Descriptor, 
          global::protocol.ProtoDefine.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RealPlayReq : pb::GeneratedMessage<RealPlayReq, RealPlayReq.Builder> {
    private RealPlayReq() { }
    private static readonly RealPlayReq defaultInstance = new RealPlayReq().MakeReadOnly();
    private static readonly string[] _realPlayReqFieldNames = new string[] { "Channel", "Cmd", "Iden" };
    private static readonly uint[] _realPlayReqFieldTags = new uint[] { 16, 24, 10 };
    public static RealPlayReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RealPlayReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RealPlayReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protocol.RealPlayMsg.internal__static_protocol_RealPlayReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RealPlayReq, RealPlayReq.Builder> InternalFieldAccessors {
      get { return global::protocol.RealPlayMsg.internal__static_protocol_RealPlayReq__FieldAccessorTable; }
    }
    
    public const int IdenFieldNumber = 1;
    private bool hasIden;
    private global::protocol.IdentityInfoCliMsg iden_;
    public bool HasIden {
      get { return hasIden; }
    }
    public global::protocol.IdentityInfoCliMsg Iden {
      get { return iden_ ?? global::protocol.IdentityInfoCliMsg.DefaultInstance; }
    }
    
    public const int ChannelFieldNumber = 2;
    private bool hasChannel;
    private uint channel_;
    public bool HasChannel {
      get { return hasChannel; }
    }
    [global::System.CLSCompliant(false)]
    public uint Channel {
      get { return channel_; }
    }
    
    public const int CmdFieldNumber = 3;
    private bool hasCmd;
    private global::protocol.ActionType cmd_ = global::protocol.ActionType.STOP;
    public bool HasCmd {
      get { return hasCmd; }
    }
    public global::protocol.ActionType Cmd {
      get { return cmd_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIden) return false;
        if (!Iden.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _realPlayReqFieldNames;
      if (hasIden) {
        output.WriteMessage(1, field_names[2], Iden);
      }
      if (hasChannel) {
        output.WriteUInt32(2, field_names[0], Channel);
      }
      if (hasCmd) {
        output.WriteEnum(3, field_names[1], (int) Cmd, Cmd);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIden) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Iden);
      }
      if (hasChannel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Channel);
      }
      if (hasCmd) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Cmd);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RealPlayReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RealPlayReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RealPlayReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RealPlayReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RealPlayReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RealPlayReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RealPlayReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RealPlayReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RealPlayReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RealPlayReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RealPlayReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RealPlayReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RealPlayReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RealPlayReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RealPlayReq result;
      
      private RealPlayReq PrepareBuilder() {
        if (resultIsReadOnly) {
          RealPlayReq original = result;
          result = new RealPlayReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RealPlayReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protocol.RealPlayReq.Descriptor; }
      }
      
      public override RealPlayReq DefaultInstanceForType {
        get { return global::protocol.RealPlayReq.DefaultInstance; }
      }
      
      public override RealPlayReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RealPlayReq) {
          return MergeFrom((RealPlayReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RealPlayReq other) {
        if (other == global::protocol.RealPlayReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIden) {
          MergeIden(other.Iden);
        }
        if (other.HasChannel) {
          Channel = other.Channel;
        }
        if (other.HasCmd) {
          Cmd = other.Cmd;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_realPlayReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _realPlayReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::protocol.IdentityInfoCliMsg.Builder subBuilder = global::protocol.IdentityInfoCliMsg.CreateBuilder();
              if (result.hasIden) {
                subBuilder.MergeFrom(Iden);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Iden = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasChannel = input.ReadUInt32(ref result.channel_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.cmd_, out unknown)) {
                result.hasCmd = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIden {
       get { return result.hasIden; }
      }
      public global::protocol.IdentityInfoCliMsg Iden {
        get { return result.Iden; }
        set { SetIden(value); }
      }
      public Builder SetIden(global::protocol.IdentityInfoCliMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIden = true;
        result.iden_ = value;
        return this;
      }
      public Builder SetIden(global::protocol.IdentityInfoCliMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIden = true;
        result.iden_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIden(global::protocol.IdentityInfoCliMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIden &&
            result.iden_ != global::protocol.IdentityInfoCliMsg.DefaultInstance) {
            result.iden_ = global::protocol.IdentityInfoCliMsg.CreateBuilder(result.iden_).MergeFrom(value).BuildPartial();
        } else {
          result.iden_ = value;
        }
        result.hasIden = true;
        return this;
      }
      public Builder ClearIden() {
        PrepareBuilder();
        result.hasIden = false;
        result.iden_ = null;
        return this;
      }
      
      public bool HasChannel {
        get { return result.hasChannel; }
      }
      [global::System.CLSCompliant(false)]
      public uint Channel {
        get { return result.Channel; }
        set { SetChannel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannel(uint value) {
        PrepareBuilder();
        result.hasChannel = true;
        result.channel_ = value;
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.hasChannel = false;
        result.channel_ = 0;
        return this;
      }
      
      public bool HasCmd {
       get { return result.hasCmd; }
      }
      public global::protocol.ActionType Cmd {
        get { return result.Cmd; }
        set { SetCmd(value); }
      }
      public Builder SetCmd(global::protocol.ActionType value) {
        PrepareBuilder();
        result.hasCmd = true;
        result.cmd_ = value;
        return this;
      }
      public Builder ClearCmd() {
        PrepareBuilder();
        result.hasCmd = false;
        result.cmd_ = global::protocol.ActionType.STOP;
        return this;
      }
    }
    static RealPlayReq() {
      object.ReferenceEquals(global::protocol.RealPlayMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RealPlayRsp : pb::GeneratedMessage<RealPlayRsp, RealPlayRsp.Builder> {
    private RealPlayRsp() { }
    private static readonly RealPlayRsp defaultInstance = new RealPlayRsp().MakeReadOnly();
    private static readonly string[] _realPlayRspFieldNames = new string[] { "Code", "DataSize", "Iden", "StreamInfo" };
    private static readonly uint[] _realPlayRspFieldTags = new uint[] { 16, 24, 10, 34 };
    public static RealPlayRsp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RealPlayRsp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RealPlayRsp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protocol.RealPlayMsg.internal__static_protocol_RealPlayRsp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RealPlayRsp, RealPlayRsp.Builder> InternalFieldAccessors {
      get { return global::protocol.RealPlayMsg.internal__static_protocol_RealPlayRsp__FieldAccessorTable; }
    }
    
    public const int IdenFieldNumber = 1;
    private bool hasIden;
    private global::protocol.IdentityInfoCliMsg iden_;
    public bool HasIden {
      get { return hasIden; }
    }
    public global::protocol.IdentityInfoCliMsg Iden {
      get { return iden_ ?? global::protocol.IdentityInfoCliMsg.DefaultInstance; }
    }
    
    public const int CodeFieldNumber = 2;
    private bool hasCode;
    private uint code_;
    public bool HasCode {
      get { return hasCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint Code {
      get { return code_; }
    }
    
    public const int DataSizeFieldNumber = 3;
    private bool hasDataSize;
    private uint dataSize_;
    public bool HasDataSize {
      get { return hasDataSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint DataSize {
      get { return dataSize_; }
    }
    
    public const int StreamInfoFieldNumber = 4;
    private bool hasStreamInfo;
    private string streamInfo_ = "";
    public bool HasStreamInfo {
      get { return hasStreamInfo; }
    }
    public string StreamInfo {
      get { return streamInfo_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIden) return false;
        if (!hasCode) return false;
        if (!Iden.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _realPlayRspFieldNames;
      if (hasIden) {
        output.WriteMessage(1, field_names[2], Iden);
      }
      if (hasCode) {
        output.WriteUInt32(2, field_names[0], Code);
      }
      if (hasDataSize) {
        output.WriteUInt32(3, field_names[1], DataSize);
      }
      if (hasStreamInfo) {
        output.WriteString(4, field_names[3], StreamInfo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIden) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Iden);
      }
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Code);
      }
      if (hasDataSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, DataSize);
      }
      if (hasStreamInfo) {
        size += pb::CodedOutputStream.ComputeStringSize(4, StreamInfo);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RealPlayRsp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RealPlayRsp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RealPlayRsp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RealPlayRsp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RealPlayRsp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RealPlayRsp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RealPlayRsp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RealPlayRsp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RealPlayRsp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RealPlayRsp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RealPlayRsp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RealPlayRsp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RealPlayRsp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RealPlayRsp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RealPlayRsp result;
      
      private RealPlayRsp PrepareBuilder() {
        if (resultIsReadOnly) {
          RealPlayRsp original = result;
          result = new RealPlayRsp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RealPlayRsp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protocol.RealPlayRsp.Descriptor; }
      }
      
      public override RealPlayRsp DefaultInstanceForType {
        get { return global::protocol.RealPlayRsp.DefaultInstance; }
      }
      
      public override RealPlayRsp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RealPlayRsp) {
          return MergeFrom((RealPlayRsp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RealPlayRsp other) {
        if (other == global::protocol.RealPlayRsp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIden) {
          MergeIden(other.Iden);
        }
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasDataSize) {
          DataSize = other.DataSize;
        }
        if (other.HasStreamInfo) {
          StreamInfo = other.StreamInfo;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_realPlayRspFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _realPlayRspFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::protocol.IdentityInfoCliMsg.Builder subBuilder = global::protocol.IdentityInfoCliMsg.CreateBuilder();
              if (result.hasIden) {
                subBuilder.MergeFrom(Iden);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Iden = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCode = input.ReadUInt32(ref result.code_);
              break;
            }
            case 24: {
              result.hasDataSize = input.ReadUInt32(ref result.dataSize_);
              break;
            }
            case 34: {
              result.hasStreamInfo = input.ReadString(ref result.streamInfo_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIden {
       get { return result.hasIden; }
      }
      public global::protocol.IdentityInfoCliMsg Iden {
        get { return result.Iden; }
        set { SetIden(value); }
      }
      public Builder SetIden(global::protocol.IdentityInfoCliMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIden = true;
        result.iden_ = value;
        return this;
      }
      public Builder SetIden(global::protocol.IdentityInfoCliMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIden = true;
        result.iden_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIden(global::protocol.IdentityInfoCliMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIden &&
            result.iden_ != global::protocol.IdentityInfoCliMsg.DefaultInstance) {
            result.iden_ = global::protocol.IdentityInfoCliMsg.CreateBuilder(result.iden_).MergeFrom(value).BuildPartial();
        } else {
          result.iden_ = value;
        }
        result.hasIden = true;
        return this;
      }
      public Builder ClearIden() {
        PrepareBuilder();
        result.hasIden = false;
        result.iden_ = null;
        return this;
      }
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCode(uint value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
      
      public bool HasDataSize {
        get { return result.hasDataSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint DataSize {
        get { return result.DataSize; }
        set { SetDataSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDataSize(uint value) {
        PrepareBuilder();
        result.hasDataSize = true;
        result.dataSize_ = value;
        return this;
      }
      public Builder ClearDataSize() {
        PrepareBuilder();
        result.hasDataSize = false;
        result.dataSize_ = 0;
        return this;
      }
      
      public bool HasStreamInfo {
        get { return result.hasStreamInfo; }
      }
      public string StreamInfo {
        get { return result.StreamInfo; }
        set { SetStreamInfo(value); }
      }
      public Builder SetStreamInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStreamInfo = true;
        result.streamInfo_ = value;
        return this;
      }
      public Builder ClearStreamInfo() {
        PrepareBuilder();
        result.hasStreamInfo = false;
        result.streamInfo_ = "";
        return this;
      }
    }
    static RealPlayRsp() {
      object.ReferenceEquals(global::protocol.RealPlayMsg.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
