// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class NatMsg {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_protocol_NatReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::protocol.NatReq, global::protocol.NatReq.Builder> internal__static_protocol_NatReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_protocol_NatRsp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::protocol.NatRsp, global::protocol.NatRsp.Builder> internal__static_protocol_NatRsp__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static NatMsg() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxOYXRNc2cucHJvdG8SCHByb3RvY29sIhcKBk5hdFJlcRINCgVVc3JJZBgB", 
          "IAIoDSIlCgZOYXRSc3ASDAoEQ29kZRgBIAIoDRINCgVVc3JJZBgCIAIoDQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_protocol_NatReq__Descriptor = Descriptor.MessageTypes[0];
        internal__static_protocol_NatReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::protocol.NatReq, global::protocol.NatReq.Builder>(internal__static_protocol_NatReq__Descriptor,
                new string[] { "UsrId", });
        internal__static_protocol_NatRsp__Descriptor = Descriptor.MessageTypes[1];
        internal__static_protocol_NatRsp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::protocol.NatRsp, global::protocol.NatRsp.Builder>(internal__static_protocol_NatRsp__Descriptor,
                new string[] { "Code", "UsrId", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NatReq : pb::GeneratedMessage<NatReq, NatReq.Builder> {
    private NatReq() { }
    private static readonly NatReq defaultInstance = new NatReq().MakeReadOnly();
    private static readonly string[] _natReqFieldNames = new string[] { "UsrId" };
    private static readonly uint[] _natReqFieldTags = new uint[] { 8 };
    public static NatReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NatReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NatReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protocol.NatMsg.internal__static_protocol_NatReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NatReq, NatReq.Builder> InternalFieldAccessors {
      get { return global::protocol.NatMsg.internal__static_protocol_NatReq__FieldAccessorTable; }
    }
    
    public const int UsrIdFieldNumber = 1;
    private bool hasUsrId;
    private uint usrId_;
    public bool HasUsrId {
      get { return hasUsrId; }
    }
    [global::System.CLSCompliant(false)]
    public uint UsrId {
      get { return usrId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUsrId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _natReqFieldNames;
      if (hasUsrId) {
        output.WriteUInt32(1, field_names[0], UsrId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUsrId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, UsrId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NatReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NatReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NatReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NatReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NatReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NatReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NatReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NatReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NatReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NatReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NatReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NatReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NatReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NatReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NatReq result;
      
      private NatReq PrepareBuilder() {
        if (resultIsReadOnly) {
          NatReq original = result;
          result = new NatReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NatReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protocol.NatReq.Descriptor; }
      }
      
      public override NatReq DefaultInstanceForType {
        get { return global::protocol.NatReq.DefaultInstance; }
      }
      
      public override NatReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NatReq) {
          return MergeFrom((NatReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NatReq other) {
        if (other == global::protocol.NatReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUsrId) {
          UsrId = other.UsrId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_natReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _natReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUsrId = input.ReadUInt32(ref result.usrId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUsrId {
        get { return result.hasUsrId; }
      }
      [global::System.CLSCompliant(false)]
      public uint UsrId {
        get { return result.UsrId; }
        set { SetUsrId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUsrId(uint value) {
        PrepareBuilder();
        result.hasUsrId = true;
        result.usrId_ = value;
        return this;
      }
      public Builder ClearUsrId() {
        PrepareBuilder();
        result.hasUsrId = false;
        result.usrId_ = 0;
        return this;
      }
    }
    static NatReq() {
      object.ReferenceEquals(global::protocol.NatMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NatRsp : pb::GeneratedMessage<NatRsp, NatRsp.Builder> {
    private NatRsp() { }
    private static readonly NatRsp defaultInstance = new NatRsp().MakeReadOnly();
    private static readonly string[] _natRspFieldNames = new string[] { "Code", "UsrId" };
    private static readonly uint[] _natRspFieldTags = new uint[] { 8, 16 };
    public static NatRsp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NatRsp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NatRsp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protocol.NatMsg.internal__static_protocol_NatRsp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NatRsp, NatRsp.Builder> InternalFieldAccessors {
      get { return global::protocol.NatMsg.internal__static_protocol_NatRsp__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private uint code_;
    public bool HasCode {
      get { return hasCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint Code {
      get { return code_; }
    }
    
    public const int UsrIdFieldNumber = 2;
    private bool hasUsrId;
    private uint usrId_;
    public bool HasUsrId {
      get { return hasUsrId; }
    }
    [global::System.CLSCompliant(false)]
    public uint UsrId {
      get { return usrId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasUsrId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _natRspFieldNames;
      if (hasCode) {
        output.WriteUInt32(1, field_names[0], Code);
      }
      if (hasUsrId) {
        output.WriteUInt32(2, field_names[1], UsrId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Code);
      }
      if (hasUsrId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, UsrId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NatRsp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NatRsp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NatRsp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NatRsp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NatRsp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NatRsp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NatRsp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NatRsp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NatRsp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NatRsp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NatRsp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NatRsp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NatRsp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NatRsp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NatRsp result;
      
      private NatRsp PrepareBuilder() {
        if (resultIsReadOnly) {
          NatRsp original = result;
          result = new NatRsp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NatRsp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protocol.NatRsp.Descriptor; }
      }
      
      public override NatRsp DefaultInstanceForType {
        get { return global::protocol.NatRsp.DefaultInstance; }
      }
      
      public override NatRsp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NatRsp) {
          return MergeFrom((NatRsp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NatRsp other) {
        if (other == global::protocol.NatRsp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasUsrId) {
          UsrId = other.UsrId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_natRspFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _natRspFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCode = input.ReadUInt32(ref result.code_);
              break;
            }
            case 16: {
              result.hasUsrId = input.ReadUInt32(ref result.usrId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCode(uint value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
      
      public bool HasUsrId {
        get { return result.hasUsrId; }
      }
      [global::System.CLSCompliant(false)]
      public uint UsrId {
        get { return result.UsrId; }
        set { SetUsrId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUsrId(uint value) {
        PrepareBuilder();
        result.hasUsrId = true;
        result.usrId_ = value;
        return this;
      }
      public Builder ClearUsrId() {
        PrepareBuilder();
        result.hasUsrId = false;
        result.usrId_ = 0;
        return this;
      }
    }
    static NatRsp() {
      object.ReferenceEquals(global::protocol.NatMsg.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
