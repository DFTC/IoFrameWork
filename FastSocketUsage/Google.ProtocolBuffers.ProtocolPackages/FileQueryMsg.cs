// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class FileQueryMsg {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_protocol_FileQueryReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::protocol.FileQueryReq, global::protocol.FileQueryReq.Builder> internal__static_protocol_FileQueryReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_protocol_FileQueryRsp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::protocol.FileQueryRsp, global::protocol.FileQueryRsp.Builder> internal__static_protocol_FileQueryRsp__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static FileQueryMsg() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJGaWxlUXVlcnlNc2cucHJvdG8SCHByb3RvY29sGhFJZGVudGl0eU1zZy5w", 
            "cm90byJwCgxGaWxlUXVlcnlSZXESKgoESWRlbhgBIAIoCzIcLnByb3RvY29s", 
            "LklkZW50aXR5SW5mb0NsaU1zZxISCgdDaGFubmVsGAIgASgNOgEwEhAKBUJl", 
            "Z2luGAMgASgNOgEwEg4KA0VuZBgEIAEoDToBMCKAAQoMRmlsZVF1ZXJ5UnNw", 
            "EioKBElkZW4YASACKAsyHC5wcm90b2NvbC5JZGVudGl0eUluZm9DbGlNc2cS", 
            "DAoEQ29kZRgCIAIoDRISCgdDaGFubmVsGAMgASgNOgEwEhAKCEZpbGVOYW1l", 
          "GAQgAygJEhAKCEZpbGVTaXplGAUgAygN"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_protocol_FileQueryReq__Descriptor = Descriptor.MessageTypes[0];
        internal__static_protocol_FileQueryReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::protocol.FileQueryReq, global::protocol.FileQueryReq.Builder>(internal__static_protocol_FileQueryReq__Descriptor,
                new string[] { "Iden", "Channel", "Begin", "End", });
        internal__static_protocol_FileQueryRsp__Descriptor = Descriptor.MessageTypes[1];
        internal__static_protocol_FileQueryRsp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::protocol.FileQueryRsp, global::protocol.FileQueryRsp.Builder>(internal__static_protocol_FileQueryRsp__Descriptor,
                new string[] { "Iden", "Code", "Channel", "FileName", "FileSize", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::protocol.IdentityMsg.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FileQueryReq : pb::GeneratedMessage<FileQueryReq, FileQueryReq.Builder> {
    private FileQueryReq() { }
    private static readonly FileQueryReq defaultInstance = new FileQueryReq().MakeReadOnly();
    private static readonly string[] _fileQueryReqFieldNames = new string[] { "Begin", "Channel", "End", "Iden" };
    private static readonly uint[] _fileQueryReqFieldTags = new uint[] { 24, 16, 32, 10 };
    public static FileQueryReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FileQueryReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FileQueryReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protocol.FileQueryMsg.internal__static_protocol_FileQueryReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FileQueryReq, FileQueryReq.Builder> InternalFieldAccessors {
      get { return global::protocol.FileQueryMsg.internal__static_protocol_FileQueryReq__FieldAccessorTable; }
    }
    
    public const int IdenFieldNumber = 1;
    private bool hasIden;
    private global::protocol.IdentityInfoCliMsg iden_;
    public bool HasIden {
      get { return hasIden; }
    }
    public global::protocol.IdentityInfoCliMsg Iden {
      get { return iden_ ?? global::protocol.IdentityInfoCliMsg.DefaultInstance; }
    }
    
    public const int ChannelFieldNumber = 2;
    private bool hasChannel;
    private uint channel_;
    public bool HasChannel {
      get { return hasChannel; }
    }
    [global::System.CLSCompliant(false)]
    public uint Channel {
      get { return channel_; }
    }
    
    public const int BeginFieldNumber = 3;
    private bool hasBegin;
    private uint begin_;
    public bool HasBegin {
      get { return hasBegin; }
    }
    [global::System.CLSCompliant(false)]
    public uint Begin {
      get { return begin_; }
    }
    
    public const int EndFieldNumber = 4;
    private bool hasEnd;
    private uint end_;
    public bool HasEnd {
      get { return hasEnd; }
    }
    [global::System.CLSCompliant(false)]
    public uint End {
      get { return end_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIden) return false;
        if (!Iden.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _fileQueryReqFieldNames;
      if (hasIden) {
        output.WriteMessage(1, field_names[3], Iden);
      }
      if (hasChannel) {
        output.WriteUInt32(2, field_names[1], Channel);
      }
      if (hasBegin) {
        output.WriteUInt32(3, field_names[0], Begin);
      }
      if (hasEnd) {
        output.WriteUInt32(4, field_names[2], End);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIden) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Iden);
      }
      if (hasChannel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Channel);
      }
      if (hasBegin) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Begin);
      }
      if (hasEnd) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, End);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FileQueryReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileQueryReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileQueryReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileQueryReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileQueryReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileQueryReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FileQueryReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FileQueryReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FileQueryReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileQueryReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FileQueryReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FileQueryReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FileQueryReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FileQueryReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FileQueryReq result;
      
      private FileQueryReq PrepareBuilder() {
        if (resultIsReadOnly) {
          FileQueryReq original = result;
          result = new FileQueryReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FileQueryReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protocol.FileQueryReq.Descriptor; }
      }
      
      public override FileQueryReq DefaultInstanceForType {
        get { return global::protocol.FileQueryReq.DefaultInstance; }
      }
      
      public override FileQueryReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FileQueryReq) {
          return MergeFrom((FileQueryReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FileQueryReq other) {
        if (other == global::protocol.FileQueryReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIden) {
          MergeIden(other.Iden);
        }
        if (other.HasChannel) {
          Channel = other.Channel;
        }
        if (other.HasBegin) {
          Begin = other.Begin;
        }
        if (other.HasEnd) {
          End = other.End;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fileQueryReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fileQueryReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::protocol.IdentityInfoCliMsg.Builder subBuilder = global::protocol.IdentityInfoCliMsg.CreateBuilder();
              if (result.hasIden) {
                subBuilder.MergeFrom(Iden);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Iden = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasChannel = input.ReadUInt32(ref result.channel_);
              break;
            }
            case 24: {
              result.hasBegin = input.ReadUInt32(ref result.begin_);
              break;
            }
            case 32: {
              result.hasEnd = input.ReadUInt32(ref result.end_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIden {
       get { return result.hasIden; }
      }
      public global::protocol.IdentityInfoCliMsg Iden {
        get { return result.Iden; }
        set { SetIden(value); }
      }
      public Builder SetIden(global::protocol.IdentityInfoCliMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIden = true;
        result.iden_ = value;
        return this;
      }
      public Builder SetIden(global::protocol.IdentityInfoCliMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIden = true;
        result.iden_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIden(global::protocol.IdentityInfoCliMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIden &&
            result.iden_ != global::protocol.IdentityInfoCliMsg.DefaultInstance) {
            result.iden_ = global::protocol.IdentityInfoCliMsg.CreateBuilder(result.iden_).MergeFrom(value).BuildPartial();
        } else {
          result.iden_ = value;
        }
        result.hasIden = true;
        return this;
      }
      public Builder ClearIden() {
        PrepareBuilder();
        result.hasIden = false;
        result.iden_ = null;
        return this;
      }
      
      public bool HasChannel {
        get { return result.hasChannel; }
      }
      [global::System.CLSCompliant(false)]
      public uint Channel {
        get { return result.Channel; }
        set { SetChannel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannel(uint value) {
        PrepareBuilder();
        result.hasChannel = true;
        result.channel_ = value;
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.hasChannel = false;
        result.channel_ = 0;
        return this;
      }
      
      public bool HasBegin {
        get { return result.hasBegin; }
      }
      [global::System.CLSCompliant(false)]
      public uint Begin {
        get { return result.Begin; }
        set { SetBegin(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBegin(uint value) {
        PrepareBuilder();
        result.hasBegin = true;
        result.begin_ = value;
        return this;
      }
      public Builder ClearBegin() {
        PrepareBuilder();
        result.hasBegin = false;
        result.begin_ = 0;
        return this;
      }
      
      public bool HasEnd {
        get { return result.hasEnd; }
      }
      [global::System.CLSCompliant(false)]
      public uint End {
        get { return result.End; }
        set { SetEnd(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEnd(uint value) {
        PrepareBuilder();
        result.hasEnd = true;
        result.end_ = value;
        return this;
      }
      public Builder ClearEnd() {
        PrepareBuilder();
        result.hasEnd = false;
        result.end_ = 0;
        return this;
      }
    }
    static FileQueryReq() {
      object.ReferenceEquals(global::protocol.FileQueryMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FileQueryRsp : pb::GeneratedMessage<FileQueryRsp, FileQueryRsp.Builder> {
    private FileQueryRsp() { }
    private static readonly FileQueryRsp defaultInstance = new FileQueryRsp().MakeReadOnly();
    private static readonly string[] _fileQueryRspFieldNames = new string[] { "Channel", "Code", "FileName", "FileSize", "Iden" };
    private static readonly uint[] _fileQueryRspFieldTags = new uint[] { 24, 16, 34, 40, 10 };
    public static FileQueryRsp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FileQueryRsp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FileQueryRsp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protocol.FileQueryMsg.internal__static_protocol_FileQueryRsp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FileQueryRsp, FileQueryRsp.Builder> InternalFieldAccessors {
      get { return global::protocol.FileQueryMsg.internal__static_protocol_FileQueryRsp__FieldAccessorTable; }
    }
    
    public const int IdenFieldNumber = 1;
    private bool hasIden;
    private global::protocol.IdentityInfoCliMsg iden_;
    public bool HasIden {
      get { return hasIden; }
    }
    public global::protocol.IdentityInfoCliMsg Iden {
      get { return iden_ ?? global::protocol.IdentityInfoCliMsg.DefaultInstance; }
    }
    
    public const int CodeFieldNumber = 2;
    private bool hasCode;
    private uint code_;
    public bool HasCode {
      get { return hasCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint Code {
      get { return code_; }
    }
    
    public const int ChannelFieldNumber = 3;
    private bool hasChannel;
    private uint channel_;
    public bool HasChannel {
      get { return hasChannel; }
    }
    [global::System.CLSCompliant(false)]
    public uint Channel {
      get { return channel_; }
    }
    
    public const int FileNameFieldNumber = 4;
    private pbc::PopsicleList<string> fileName_ = new pbc::PopsicleList<string>();
    public scg::IList<string> FileNameList {
      get { return pbc::Lists.AsReadOnly(fileName_); }
    }
    public int FileNameCount {
      get { return fileName_.Count; }
    }
    public string GetFileName(int index) {
      return fileName_[index];
    }
    
    public const int FileSizeFieldNumber = 5;
    private pbc::PopsicleList<uint> fileSize_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> FileSizeList {
      get { return pbc::Lists.AsReadOnly(fileSize_); }
    }
    public int FileSizeCount {
      get { return fileSize_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetFileSize(int index) {
      return fileSize_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIden) return false;
        if (!hasCode) return false;
        if (!Iden.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _fileQueryRspFieldNames;
      if (hasIden) {
        output.WriteMessage(1, field_names[4], Iden);
      }
      if (hasCode) {
        output.WriteUInt32(2, field_names[1], Code);
      }
      if (hasChannel) {
        output.WriteUInt32(3, field_names[0], Channel);
      }
      if (fileName_.Count > 0) {
        output.WriteStringArray(4, field_names[2], fileName_);
      }
      if (fileSize_.Count > 0) {
        output.WriteUInt32Array(5, field_names[3], fileSize_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIden) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Iden);
      }
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Code);
      }
      if (hasChannel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Channel);
      }
      {
        int dataSize = 0;
        foreach (string element in FileNameList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * fileName_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in FileSizeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * fileSize_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FileQueryRsp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileQueryRsp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileQueryRsp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FileQueryRsp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FileQueryRsp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileQueryRsp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FileQueryRsp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FileQueryRsp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FileQueryRsp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FileQueryRsp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FileQueryRsp MakeReadOnly() {
      fileName_.MakeReadOnly();
      fileSize_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FileQueryRsp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FileQueryRsp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FileQueryRsp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FileQueryRsp result;
      
      private FileQueryRsp PrepareBuilder() {
        if (resultIsReadOnly) {
          FileQueryRsp original = result;
          result = new FileQueryRsp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FileQueryRsp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protocol.FileQueryRsp.Descriptor; }
      }
      
      public override FileQueryRsp DefaultInstanceForType {
        get { return global::protocol.FileQueryRsp.DefaultInstance; }
      }
      
      public override FileQueryRsp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FileQueryRsp) {
          return MergeFrom((FileQueryRsp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FileQueryRsp other) {
        if (other == global::protocol.FileQueryRsp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIden) {
          MergeIden(other.Iden);
        }
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasChannel) {
          Channel = other.Channel;
        }
        if (other.fileName_.Count != 0) {
          result.fileName_.Add(other.fileName_);
        }
        if (other.fileSize_.Count != 0) {
          result.fileSize_.Add(other.fileSize_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fileQueryRspFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fileQueryRspFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::protocol.IdentityInfoCliMsg.Builder subBuilder = global::protocol.IdentityInfoCliMsg.CreateBuilder();
              if (result.hasIden) {
                subBuilder.MergeFrom(Iden);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Iden = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCode = input.ReadUInt32(ref result.code_);
              break;
            }
            case 24: {
              result.hasChannel = input.ReadUInt32(ref result.channel_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.fileName_);
              break;
            }
            case 42:
            case 40: {
              input.ReadUInt32Array(tag, field_name, result.fileSize_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIden {
       get { return result.hasIden; }
      }
      public global::protocol.IdentityInfoCliMsg Iden {
        get { return result.Iden; }
        set { SetIden(value); }
      }
      public Builder SetIden(global::protocol.IdentityInfoCliMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIden = true;
        result.iden_ = value;
        return this;
      }
      public Builder SetIden(global::protocol.IdentityInfoCliMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIden = true;
        result.iden_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIden(global::protocol.IdentityInfoCliMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIden &&
            result.iden_ != global::protocol.IdentityInfoCliMsg.DefaultInstance) {
            result.iden_ = global::protocol.IdentityInfoCliMsg.CreateBuilder(result.iden_).MergeFrom(value).BuildPartial();
        } else {
          result.iden_ = value;
        }
        result.hasIden = true;
        return this;
      }
      public Builder ClearIden() {
        PrepareBuilder();
        result.hasIden = false;
        result.iden_ = null;
        return this;
      }
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCode(uint value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
      
      public bool HasChannel {
        get { return result.hasChannel; }
      }
      [global::System.CLSCompliant(false)]
      public uint Channel {
        get { return result.Channel; }
        set { SetChannel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannel(uint value) {
        PrepareBuilder();
        result.hasChannel = true;
        result.channel_ = value;
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.hasChannel = false;
        result.channel_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> FileNameList {
        get { return PrepareBuilder().fileName_; }
      }
      public int FileNameCount {
        get { return result.FileNameCount; }
      }
      public string GetFileName(int index) {
        return result.GetFileName(index);
      }
      public Builder SetFileName(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fileName_[index] = value;
        return this;
      }
      public Builder AddFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fileName_.Add(value);
        return this;
      }
      public Builder AddRangeFileName(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.fileName_.Add(values);
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.fileName_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> FileSizeList {
        get { return PrepareBuilder().fileSize_; }
      }
      public int FileSizeCount {
        get { return result.FileSizeCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetFileSize(int index) {
        return result.GetFileSize(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFileSize(int index, uint value) {
        PrepareBuilder();
        result.fileSize_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddFileSize(uint value) {
        PrepareBuilder();
        result.fileSize_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeFileSize(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.fileSize_.Add(values);
        return this;
      }
      public Builder ClearFileSize() {
        PrepareBuilder();
        result.fileSize_.Clear();
        return this;
      }
    }
    static FileQueryRsp() {
      object.ReferenceEquals(global::protocol.FileQueryMsg.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
